pipeline {
    agent {
        label "jenkins-slave-argo-qmake"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    parameters {
        booleanParam(name: 'RELEASE',
            defaultValue: false,
            description: 'Create a Release')
    }
    triggers { pollSCM('* * * * *') }    
    stages {

        stage("Get Binaries") {
            when {
                expression { params.RELEASE == false }
            }            
            steps {
                script {
                    BRANCH = BRANCH_NAME.replace('/','_')
                }
                withCredentials([usernamePassword(credentialsId: 'bc6e150e-ede8-4e35-8af4-0f037edee8ac', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                    getBinaries(BRANCH,USERNAME,PASSWORD)
                }
            }
        }

        stage("Parallel build : Get third Parties"){
            when {
                expression { params.RELEASE == true }
            } 
            parallel {
                    stage("Get Third Parties Mono") {           
                        steps {
                            dir("Mono") {
                                getThirdParties('1.0.0')
                            }
                        }
                    }

                    stage("Get Third Parties Multithread") {           
                        steps {
                            dir("Multi") {
                                getThirdParties('1.0.0')
                            }
                        }
                    }
            }
        }     

        stage("Parallel build : Build"){
            parallel {
                    stage("Build Mono") {
                        steps {
                            withEnv(['REMAKEN_RULES_ROOT=/home/jenkins/.remaken/rules/']) {
                                sh "qmake Mono/SolARSlamSampleMono.pro"
                                sh "make"
                                sh "make install"
                            }
                        }
                    }

                    stage("Build Multi") {
                        steps {
                            withEnv(['REMAKEN_RULES_ROOT=/home/jenkins/.remaken/rules/']) {
                                sh "qmake Multi/SolARSlamSampleMulti.pro"
                                sh "make"
                                sh "make install"
                            }
                        }
                    }
            }
        }

        stage("Parallel build : Build Debug"){
            when {
                expression { params.RELEASE == true }
            }  
            parallel {
                    stage("Build Debug StandAlone") {         
                        steps {
                            withEnv(['REMAKEN_RULES_ROOT=/home/jenkins/.remaken/rules/']) {
                                sh "qmake Mono/SolARSlamSampleMono.pro CONFIG+=debug"
                                sh "make"
                                sh "make install"
                            }
                        }
                    }

                    stage("Build Debug Multithread") {         
                        steps {
                            withEnv(['REMAKEN_RULES_ROOT=/home/jenkins/.remaken/rules/']) {
                                sh "qmake Multi/SolARSlamSampleMulti.pro CONFIG+=debug"
                                sh "make"
                                sh "make install"
                            }
                        }
                    }                      
            }
        }      

        stage("Share Binaries") {
            when {
                expression { params.RELEASE == false }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'bc6e150e-ede8-4e35-8af4-0f037edee8ac', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                    shareBinaries(BRANCH,USERNAME,PASSWORD)
                }
            }
        }           

        stage("Release") {
            when {
                expression { params.RELEASE == true }
            }
            steps {
                script {
                    version = sh (
                        script: "cat *.pro  | grep VERSION | head -1 | cut -d '=' -f 2",
                        returnStdout: true
                    )
                    version = version.replace("\n","")
                }
                prepareRelease("SolARBuild","linux-gcc","PipelineSlam") 
                withCredentials([string(credentialsId: 'github-token', variable: 'token')]) {
                    release("Sample-Slam","PipelineSlam/${version}/unix","${WORKSPACE}/artifactory/x86_64_shared_release/PipelineSlam_${version}_x86_64_shared_release.zip ${WORKSPACE}/artifactory/x86_64_shared_debug/PipelineSlam_${version}_x86_64_shared_debug.zip",token);
                }
            }   
        }
}
}